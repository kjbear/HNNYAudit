<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use SimpleXMLElement;
use \App\Monitor;
use \App\Counter;
use Log;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Client;
use Exception;

class SiteScopeController extends Controller
{

    public function storeXML(Request $request, $environment)
    {
        #  This funcion takes the Request POST body (which is XML) and 
        #   creates a SimpleXMLElement object from it.  Then it takes the 
        #   child elements of the monitor and parses the counter values.
        #
        #   K Obear - HealthNow New York 2018
        #

        $xml = new SimpleXMLElement($request->getContent());

        $count = 0;
        foreach ($xml->xpath('//monitor') as $monitor) {
            $mon = new Monitor;

            $mon->name               = (string)$monitor['name'];
            $mon->type               = (string)$monitor['type'];
            $mon->target             = (string)$monitor['target'];
            $mon->targetIP           = (string)$monitor['targetIP'];
            $mon->time               = date("Y-m-d H:i:s", substr((string)$monitor['time'], 0, 10));
            $mon->quality            = (string)$monitor['quality'];
            $mon->sourceTemplateName = (string)$monitor['sourceTemplateName'];
            $mon->environment        = $environment;
            $mon->raw                = $xml->asXML();
 
            # Create InfluxDB string
            $host = "host=".(string)$monitor['target'].",test=".strtr($mon->name,[' ' => '_']);

            # Clear out the metrics string
            $metrics = "";
            
            # Loop through the monitors 
            foreach ($monitor->children() as $child){

                $rec = new Counter;

                $rec->name       = (string)$child['name'];
                $rec->status     = (string)$child['status'];
                $rec->quality    = (string)$child['quality'];
                $rec->value      = (string)$child['value'];
                $rec->monitor_id = $mon->id;

                # Sanitize for InfluxDB insertion
                if (is_null($rec->value)) { $rec->value = 0; }				# If the value is null, then make it 0
                if ($rec->value == "") { $rec->value = 0; }				# If the value is empty, make it 0
                if ($rec->value == "n/a") { $rec->value = 0; }				# If the value is "n/a", make it 0
                $rec->name = strtr($rec->name,['\\' => '-']);				# Replace backslashes with dashes (to make it InfluxDB friendly)
                if (!is_numeric($rec->value)) { $rec->value = "\"".$rec->value."\""; }  # If the value is not numeric, surround with quotes
                
		# Get rid of "content match" messages, we do not want them
		if ($rec->name == "content match") { continue; }

                # If it is a PhysicalDisk or Dyanmic Disk, tag with the volume name

                # Assemble InfluxDB metric string
                $metrics = strtr($rec->name,[' ' => '_'])."=".$rec->value; 

                # Assemble the complete string that InfluxDB expects for metrics
                $data = strtr($mon->type,[' ' => '_']).",".$host." ".$metrics;

                # Try to send the data to InfluxDB.  If it rejects it, log it and move to the next metric
                try {
                    $result = $this->sendData($data);
                    #Log::info($data);
                } catch (Exception $e) {
                    Log::error("Error logging to InfluxDB:  ". $e->getMessage());
                }
            }
   
        }
    }

    function sendData($line)
    {
        # This function uses the GuzzleHTTP library to send data to InfluxDB via HTTP REST API   

        # Instantiate new client
        $client = new Client();
        
        # Set the server name, port and database for InfluxDB
	$server = "emsd103bvla.healthnow.org";
	$port   = "8086";
	$db     = "SiteScope";

	#  Try to send the data to InfluxDB, if it chokes, log an error.
        try {
	    $res = $client->request('POST','http://'.$server.':'.$port.'/write?db='.$db, ['body' => $line ]);
        } catch (Exception $e) {
	    Log::error("--> Error sending ".$line);
            Log::error("--> Error is ". $e->getMessage());
	}

	#  Try to send the data to InfluxDB PROD, if it chokes, log an error.
        try {
            $server = "emspr09bvla.healthnow.org";
	    $res = $client->request('POST','http://'.$server.':'.$port.'/write?db='.$db, ['body' => $line ]);
        } catch (Exception $e) {
	    Log::error("--> PROD Error sending ".$line);
            Log::error("--> PROD Error is ". $e->getMessage());
	}


        #Log::info($res->getStatusCode());

    }

}
